{"ast":null,"code":"import _defineProperty from \"/Users/naufanharish/react/pokemon/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport { POKEMON_URL, STORE_TYPE } from '../../constants';\nexport function getPokemonList() {\n  return async (dispatch, getState) => {\n    const _getState = getState(),\n          _getState$pokemon = _getState.pokemon,\n          isLoading = _getState$pokemon.isLoading,\n          offset = _getState$pokemon.offset;\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_REQUESTING\n    });\n    await axios.get(\"\".concat(POKEMON_URL, \"/pokemon/?limit=20&offset=\").concat(offset)).then(response => dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_SUCCESS,\n      payload: response.data\n    })).catch(error => {\n      dispatch({\n        type: STORE_TYPE.GET_ALL_POKEMON_ERROR,\n        payload: {\n          message: error\n        }\n      });\n    });\n  };\n}\nexport function getPokemonDetails(id, type, idx) {\n  return async (dispatch, getState) => {\n    const _getState2 = getState(),\n          isLoading = _getState2.pokemon.isLoading;\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_REQUESTING\n    });\n    await axios.get(\"\".concat(POKEMON_URL, \"/pokemon/\").concat(id)).then(response => dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_SUCCESS,\n      payload: _objectSpread({}, response.data, {\n        getFrom: type,\n        pokeIdx: idx\n      })\n    })).catch(error => {\n      dispatch({\n        type: STORE_TYPE.POKEMON_DETAILS_ERROR,\n        payload: {\n          message: error\n        }\n      });\n    });\n  };\n}\nexport function catchPokemon() {\n  return dispatch => {\n    dispatch({\n      type: STORE_TYPE.START_CATCHING\n    });\n    const probability = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\n    let idx = Math.floor(Math.random() * probability.length);\n    setTimeout(() => {\n      if (probability[idx] === 1) {\n        dispatch({\n          type: STORE_TYPE.POKEMON_CATCHED\n        });\n      } else {\n        dispatch({\n          type: STORE_TYPE.CATCHED_FAILED\n        });\n      }\n    }, 2000);\n  };\n}\nexport function resetCatchFailure() {\n  return {\n    type: STORE_TYPE.RESET_CATCH_FAILURE\n  };\n}\nexport function getMyPokemonList() {\n  return async dispatch => {\n    await dispatch({\n      type: STORE_TYPE.GET_MY_POKEMON_LIST\n    });\n  };\n}\nexport function changePokemonNickName(nicName) {\n  return {\n    type: STORE_TYPE.CHANGE_NICK_NAME,\n    payload: nicName\n  };\n}\nexport function setToDeleteIndex(idx) {\n  return {\n    type: STORE_TYPE.SET_INDEX_TO_DELETE,\n    payload: idx\n  };\n}\nexport function deletePokemon(id) {\n  return {\n    type: STORE_TYPE.DELETE_POKEMON,\n    payload: id\n  };\n}\nexport function resetToDeleteIndex() {\n  return {\n    type: STORE_TYPE.RESET_INDEX_TO_DELETE\n  };\n}","map":{"version":3,"sources":["/Users/naufanharish/react/pokemon/src/store/actions/index.js"],"names":["axios","POKEMON_URL","STORE_TYPE","getPokemonList","dispatch","getState","pokemon","isLoading","offset","type","GET_ALL_POKEMON_REQUESTING","get","then","response","GET_ALL_POKEMON_SUCCESS","payload","data","catch","error","GET_ALL_POKEMON_ERROR","message","getPokemonDetails","id","idx","POKEMON_DETAILS_REQUESTING","POKEMON_DETAILS_SUCCESS","getFrom","pokeIdx","POKEMON_DETAILS_ERROR","catchPokemon","START_CATCHING","probability","Math","floor","random","length","setTimeout","POKEMON_CATCHED","CATCHED_FAILED","resetCatchFailure","RESET_CATCH_FAILURE","getMyPokemonList","GET_MY_POKEMON_LIST","changePokemonNickName","nicName","CHANGE_NICK_NAME","setToDeleteIndex","SET_INDEX_TO_DELETE","deletePokemon","DELETE_POKEMON","resetToDeleteIndex","RESET_INDEX_TO_DELETE"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {POKEMON_URL,STORE_TYPE} from '../../constants';\n\nexport function getPokemonList() {\n  return async (dispatch, getState) => {\n    const {\n      pokemon: {\n        isLoading,\n        offset\n      }\n    } = getState();\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_REQUESTING,\n    });\n\n    await axios.get(`${POKEMON_URL}/pokemon/?limit=20&offset=${offset}`)\n      .then(\n        response => dispatch({\n          type: STORE_TYPE.GET_ALL_POKEMON_SUCCESS,\n          payload: response.data\n        }))\n      .catch(error => {\n        dispatch({\n          type: STORE_TYPE.GET_ALL_POKEMON_ERROR,\n          payload: { message:error }\n        });\n      })\n  };\n}\n\nexport function getPokemonDetails(id,type,idx) {\n  return async (dispatch, getState) => {\n    const {\n      pokemon: {\n        isLoading\n      }\n    } = getState();\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_REQUESTING,\n    });\n\n    await axios.get(`${POKEMON_URL}/pokemon/${id}`)\n      .then(\n        response => dispatch({\n          type: STORE_TYPE.POKEMON_DETAILS_SUCCESS,\n          payload: {...response.data, getFrom:type, pokeIdx: idx}\n        }))\n      .catch(error => {\n        dispatch({\n          type: STORE_TYPE.POKEMON_DETAILS_ERROR,\n          payload: { message:error }\n        });\n      })\n  };\n}\n\nexport function catchPokemon() {\n  return (dispatch) => {\n    dispatch({\n      type: STORE_TYPE.START_CATCHING,\n    });\n    const probability = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\n    let idx = Math.floor(Math.random() * probability.length);\n    setTimeout(() => {\n      if (probability[idx] === 1) {\n        dispatch({\n          type: STORE_TYPE.POKEMON_CATCHED\n        })\n      }\n      else {\n        dispatch({\n          type: STORE_TYPE.CATCHED_FAILED,\n        })\n      }\n    }, 2000)\n    \n  }\n}\n\nexport function resetCatchFailure() {\n  return {\n    type: STORE_TYPE.RESET_CATCH_FAILURE,\n  }\n}\n\nexport function getMyPokemonList() {\n  return async (dispatch) => {\n    await dispatch({\n      type: STORE_TYPE.GET_MY_POKEMON_LIST,\n    })\n  }\n}\n\nexport function changePokemonNickName(nicName) {\n  return {\n    type: STORE_TYPE.CHANGE_NICK_NAME,\n    payload: nicName\n  }\n}\n\nexport function setToDeleteIndex(idx) {\n  return {\n    type: STORE_TYPE.SET_INDEX_TO_DELETE,\n    payload: idx\n  }\n}\n\nexport function deletePokemon(id) {\n  return {\n    type: STORE_TYPE.DELETE_POKEMON,\n    payload: id\n  }\n}\n\nexport function resetToDeleteIndex() {\n  return {\n    type: STORE_TYPE.RESET_INDEX_TO_DELETE,\n  }\n}"]},"metadata":{},"sourceType":"module"}