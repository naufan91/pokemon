{"ast":null,"code":"import _defineProperty from \"/Users/naufanharish/react/pokemon/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { STORE_TYPE } from '../../constants';\nconst initialState = {\n  pokemonList: [],\n  myPokemon: [],\n  selectedPokemon: {\n    forms: [],\n    abilities: [],\n    stats: [],\n    moves: [],\n    sprites: {},\n    held_items: [],\n    species: {},\n    game_indices: [],\n    types: []\n  },\n  isLoading: false,\n  offset: 0,\n  error: null,\n  isFetched: false,\n  detailsFetched: false,\n  isCatched: null\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case STORE_TYPE.GET_ALL_POKEMON_REQUESTING:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: null\n      });\n\n    case STORE_TYPE.GET_ALL_POKEMON_SUCCESS:\n      return _objectSpread({}, state, {\n        pokemonList: state.pokemonList.concat(action.payload.results.map(item => {\n          return {\n            id: item.url.substring(34, item.url.length - 1),\n            name: item.name,\n            url: item.url,\n            owned: 0\n          };\n        })),\n        isLoading: false,\n        offset: state.offset + 20,\n        isFetched: true,\n        error: null\n      });\n\n    case STORE_TYPE.GET_ALL_POKEMON_ERROR:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload.message.error // Pokemon details\n\n      });\n\n    case STORE_TYPE.POKEMON_DETAILS_REQUESTING:\n      return _objectSpread({}, state, {\n        selectedPokemon: {\n          forms: [],\n          abilities: [],\n          stats: [],\n          moves: [],\n          sprites: {},\n          held_items: [],\n          species: {},\n          game_indices: [],\n          types: []\n        },\n        isLoading: true,\n        error: null\n      });\n\n    case STORE_TYPE.POKEMON_DETAILS_SUCCESS:\n      let nickname = null;\n      let poke = state.pokemonList.find(function (element) {\n        return element.id === \"\".concat(action.payload.id);\n      });\n\n      if (state.myPokemon.length) {\n        state.myPokemon.find(function (element) {\n          if (element.id === \"\".concat(action.payload.id)) {\n            nickname = element.nickname;\n          }\n        });\n      }\n\n      if (!poke || poke === undefined) return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        detailsFetched: false\n      });\n      return _objectSpread({}, state, {\n        selectedPokemon: _objectSpread({}, action.payload, {\n          owned: poke.owned,\n          nickname: nickname\n        }),\n        isLoading: false,\n        detailsFetched: true,\n        error: null\n      });\n\n    case STORE_TYPE.POKEMON_DETAILS_ERROR:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload.message.error // Catch Pokemon\n\n      });\n\n    case STORE_TYPE.START_CATCHING:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        isCatched: null\n      });\n\n    case STORE_TYPE.POKEMON_CATCHED:\n      const pokeIndex = state.pokemonList.findIndex(poke => poke.id === \"\".concat(state.selectedPokemon.id));\n      state.pokemonList[pokeIndex].owned = state.pokemonList[pokeIndex].owned + 1;\n      return _objectSpread({}, state, {\n        myPokemon: state.myPokemon.concat({\n          id: \"\".concat(state.selectedPokemon.id),\n          name: state.selectedPokemon.name,\n          nickname: '-'\n        }),\n        pokemonList: state.pokemonList,\n        isLoading: false,\n        isCatched: true\n      });\n\n    case STORE_TYPE.CATCHED_FAILED:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isCatched: false\n      });\n\n    case STORE_TYPE.RESET_CATCH_FAILURE:\n      return _objectSpread({}, state, {\n        catchFailure: false // Change Pokemon Nick Name\n\n      });\n\n    case STORE_TYPE.CHANGE_NICK_NAME:\n      state.myPokemon[state.myPokemon.findIndex(poke => poke.id === \"\".concat(state.selectedPokemon.id))].nickname = action.payload;\n      return _objectSpread({}, state, {\n        myPokemon: state.myPokemon\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/naufanharish/react/pokemon/src/store/reducers/pokemon_reducers.js"],"names":["STORE_TYPE","initialState","pokemonList","myPokemon","selectedPokemon","forms","abilities","stats","moves","sprites","held_items","species","game_indices","types","isLoading","offset","error","isFetched","detailsFetched","isCatched","state","action","type","GET_ALL_POKEMON_REQUESTING","GET_ALL_POKEMON_SUCCESS","concat","payload","results","map","item","id","url","substring","length","name","owned","GET_ALL_POKEMON_ERROR","message","POKEMON_DETAILS_REQUESTING","POKEMON_DETAILS_SUCCESS","nickname","poke","find","element","undefined","POKEMON_DETAILS_ERROR","START_CATCHING","POKEMON_CATCHED","pokeIndex","findIndex","CATCHED_FAILED","RESET_CATCH_FAILURE","catchFailure","CHANGE_NICK_NAME"],"mappings":"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","sourcesContent":["import { STORE_TYPE } from '../../constants';\n\nconst initialState = {\n    pokemonList: [],\n    myPokemon: [],\n    selectedPokemon: {\n        forms: [],\n        abilities: [],\n        stats: [],\n        moves: [],\n        sprites: {},\n        held_items: [],\n        species: {},\n        game_indices: [],\n        types: []\n    },\n    isLoading: false,\n    offset: 0,\n    error: null,\n    isFetched: false,\n    detailsFetched: false,\n    isCatched: null,\n\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case STORE_TYPE.GET_ALL_POKEMON_REQUESTING:\n            return { ...state, isLoading: true, error: null }\n        case STORE_TYPE.GET_ALL_POKEMON_SUCCESS:\n            return {\n                ...state,\n                pokemonList: state.pokemonList.concat(\n                    action.payload.results.map((item) => {\n                        return {\n                            id: item.url.substring(34, item.url.length - 1),\n                            name: item.name,\n                            url: item.url,\n                            owned: 0,\n                        }\n                    })\n                ),\n                isLoading: false,\n                offset: state.offset + 20,\n                isFetched: true,\n                error: null\n            }\n        case STORE_TYPE.GET_ALL_POKEMON_ERROR:\n            return { ...state, isLoading: false, error: action.payload.message.error }\n\n        // Pokemon details\n        case STORE_TYPE.POKEMON_DETAILS_REQUESTING:\n            return {\n                ...state,\n                selectedPokemon: {\n                    forms: [],\n                    abilities: [],\n                    stats: [],\n                    moves: [],\n                    sprites: {},\n                    held_items: [],\n                    species: {},\n                    game_indices: [],\n                    types: []\n                },\n                isLoading: true,\n                error: null\n            }\n        case STORE_TYPE.POKEMON_DETAILS_SUCCESS:\n            let nickname = null;\n            let poke = state.pokemonList.find(function (element) {\n                return element.id === `${action.payload.id}`;\n            });\n            if(state.myPokemon.length) {\n                state.myPokemon.find(function (element) {\n                    if(element.id === `${action.payload.id}`){\n                        nickname=element.nickname\n                    }\n                });\n            }\n\n            if (!poke || poke === undefined) return { ...state, isLoading: false, error: true, detailsFetched: false }\n            return {\n                ...state,\n                selectedPokemon: { ...action.payload, owned: poke.owned, nickname:nickname },\n                isLoading: false,\n                detailsFetched: true,\n                error: null\n            }\n        case STORE_TYPE.POKEMON_DETAILS_ERROR:\n            return { ...state, isLoading: false, error: action.payload.message.error }\n\n        // Catch Pokemon\n        case STORE_TYPE.START_CATCHING:\n            return { ...state, isLoading: true, isCatched: null }\n        case STORE_TYPE.POKEMON_CATCHED:          \n            const pokeIndex = state.pokemonList.findIndex(poke => poke.id === `${state.selectedPokemon.id}`);\n            state.pokemonList[pokeIndex].owned = state.pokemonList[pokeIndex].owned + 1;\n            return {\n                ...state,\n                myPokemon: state.myPokemon.concat(\n                    {\n                        id: `${state.selectedPokemon.id}`,\n                        name: state.selectedPokemon.name,\n                        nickname: '-'\n                    }),\n                pokemonList: state.pokemonList,\n                isLoading: false,\n                isCatched: true\n            }\n        case STORE_TYPE.CATCHED_FAILED:\n            return { ...state, isLoading: false, isCatched: false }\n\n        case STORE_TYPE.RESET_CATCH_FAILURE:\n            return {\n                ...state,\n                catchFailure: false\n            }\n        \n        // Change Pokemon Nick Name\n        case STORE_TYPE.CHANGE_NICK_NAME:\n            state.myPokemon[state.myPokemon.findIndex(poke => poke.id === `${state.selectedPokemon.id}`)].nickname = action.payload;\n            return {\n                ...state,\n                myPokemon: state.myPokemon\n            }\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}