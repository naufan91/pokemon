{"ast":null,"code":"import axios from 'axios';\nimport { POKEMON_URL, STORE_TYPE } from '../../constants';\nexport function getPokemonList() {\n  return async (dispatch, getState) => {\n    const _getState = getState(),\n          _getState$pokemon = _getState.pokemon,\n          isLoading = _getState$pokemon.isLoading,\n          offset = _getState$pokemon.offset;\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_REQUESTING\n    });\n    await axios.get(\"\".concat(POKEMON_URL, \"/pokemon/?limit=20&offset=\").concat(offset)).then(response => dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_SUCCESS,\n      payload: response.data\n    })).catch(error => {\n      dispatch({\n        type: STORE_TYPE.GET_ALL_POKEMON_ERROR,\n        payload: {\n          message: error\n        }\n      });\n    });\n  };\n}\nexport function getPokemonDetails(pokeID) {\n  return async (dispatch, getState) => {\n    const _getState2 = getState(),\n          isLoading = _getState2.pokemon.isLoading;\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_REQUESTING\n    });\n    await axios.get(\"\".concat(POKEMON_URL, \"/pokemon/\").concat(pokeID)).then(response => dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_SUCCESS,\n      payload: response.data\n    })).catch(error => {\n      dispatch({\n        type: STORE_TYPE.POKEMON_DETAILS_ERROR,\n        payload: {\n          message: error\n        }\n      });\n    });\n  };\n}\nexport function catchPokemon(id) {\n  return async dispatch => {\n    await dispatch({\n      type: STORE_TYPE.POKEMON_CATCHED,\n      payload: id\n    });\n  };\n}\nexport function resetCatchFailure() {\n  return {\n    type: STORE_TYPE.RESET_CATCH_FAILURE\n  };\n}\nexport function getMyPokemonList() {\n  return async dispatch => {\n    await dispatch({\n      type: STORE_TYPE.GET_MY_POKEMON_LIST\n    });\n  };\n}","map":{"version":3,"sources":["/Users/naufanharish/react/pokemon/src/store/actions/index.js"],"names":["axios","POKEMON_URL","STORE_TYPE","getPokemonList","dispatch","getState","pokemon","isLoading","offset","type","GET_ALL_POKEMON_REQUESTING","get","then","response","GET_ALL_POKEMON_SUCCESS","payload","data","catch","error","GET_ALL_POKEMON_ERROR","message","getPokemonDetails","pokeID","POKEMON_DETAILS_REQUESTING","POKEMON_DETAILS_SUCCESS","POKEMON_DETAILS_ERROR","catchPokemon","id","POKEMON_CATCHED","resetCatchFailure","RESET_CATCH_FAILURE","getMyPokemonList","GET_MY_POKEMON_LIST"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAoBC,UAApB,QAAqC,iBAArC;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,sBAM/BA,QAAQ,EANuB;AAAA,wCAEjCC,OAFiC;AAAA,UAG/BC,SAH+B,qBAG/BA,SAH+B;AAAA,UAI/BC,MAJ+B,qBAI/BA,MAJ+B;;AAQnC,QAAID,SAAJ,EAAe;AACb;AACD;;AAEDH,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACQ;AADV,KAAD,CAAR;AAIA,UAAMV,KAAK,CAACW,GAAN,WAAaV,WAAb,uCAAqDO,MAArD,GACHI,IADG,CAEFC,QAAQ,IAAIT,QAAQ,CAAC;AACnBK,MAAAA,IAAI,EAAEP,UAAU,CAACY,uBADE;AAEnBC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFC,KAAD,CAFlB,EAMHC,KANG,CAMGC,KAAK,IAAI;AACdd,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEP,UAAU,CAACiB,qBADV;AAEPJ,QAAAA,OAAO,EAAE;AAAEK,UAAAA,OAAO,EAACF;AAAV;AAFF,OAAD,CAAR;AAID,KAXG,CAAN;AAYD,GA5BD;AA6BD;AAED,OAAO,SAASG,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,SAAO,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,uBAK/BA,QAAQ,EALuB;AAAA,UAG/BE,SAH+B,cAEjCD,OAFiC,CAG/BC,SAH+B;;AAOnC,QAAIA,SAAJ,EAAe;AACb;AACD;;AAEDH,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACqB;AADV,KAAD,CAAR;AAIA,UAAMvB,KAAK,CAACW,GAAN,WAAaV,WAAb,sBAAoCqB,MAApC,GACHV,IADG,CAEFC,QAAQ,IAAIT,QAAQ,CAAC;AACnBK,MAAAA,IAAI,EAAEP,UAAU,CAACsB,uBADE;AAEnBT,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFC,KAAD,CAFlB,EAMHC,KANG,CAMGC,KAAK,IAAI;AACdd,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEP,UAAU,CAACuB,qBADV;AAEPV,QAAAA,OAAO,EAAE;AAAEK,UAAAA,OAAO,EAACF;AAAV;AAFF,OAAD,CAAR;AAID,KAXG,CAAN;AAYD,GA3BD;AA4BD;AAED,OAAO,SAASQ,YAAT,CAAsBC,EAAtB,EAA0B;AAC/B,SAAO,MAAOvB,QAAP,IAAoB;AACzB,UAAMA,QAAQ,CAAC;AACbK,MAAAA,IAAI,EAAEP,UAAU,CAAC0B,eADJ;AAEbb,MAAAA,OAAO,EAAEY;AAFI,KAAD,CAAd;AAID,GALD;AAMD;AAED,OAAO,SAASE,iBAAT,GAA6B;AAClC,SAAO;AACLpB,IAAAA,IAAI,EAAEP,UAAU,CAAC4B;AADZ,GAAP;AAGD;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjC,SAAO,MAAO3B,QAAP,IAAoB;AACzB,UAAMA,QAAQ,CAAC;AACbK,MAAAA,IAAI,EAAEP,UAAU,CAAC8B;AADJ,KAAD,CAAd;AAGD,GAJD;AAKD","sourcesContent":["import axios from 'axios';\nimport {POKEMON_URL,STORE_TYPE} from '../../constants';\n\nexport function getPokemonList() {\n  return async (dispatch, getState) => {\n    const {\n      pokemon: {\n        isLoading,\n        offset\n      }\n    } = getState();\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.GET_ALL_POKEMON_REQUESTING,\n    });\n\n    await axios.get(`${POKEMON_URL}/pokemon/?limit=20&offset=${offset}`)\n      .then(\n        response => dispatch({\n          type: STORE_TYPE.GET_ALL_POKEMON_SUCCESS,\n          payload: response.data\n        }))\n      .catch(error => {\n        dispatch({\n          type: STORE_TYPE.GET_ALL_POKEMON_ERROR,\n          payload: { message:error }\n        });\n      })\n  };\n}\n\nexport function getPokemonDetails(pokeID) {\n  return async (dispatch, getState) => {\n    const {\n      pokemon: {\n        isLoading\n      }\n    } = getState();\n\n    if (isLoading) {\n      return;\n    }\n\n    dispatch({\n      type: STORE_TYPE.POKEMON_DETAILS_REQUESTING,\n    });\n\n    await axios.get(`${POKEMON_URL}/pokemon/${pokeID}`)\n      .then(\n        response => dispatch({\n          type: STORE_TYPE.POKEMON_DETAILS_SUCCESS,\n          payload: response.data\n        }))\n      .catch(error => {\n        dispatch({\n          type: STORE_TYPE.POKEMON_DETAILS_ERROR,\n          payload: { message:error }\n        });\n      })\n  };\n}\n\nexport function catchPokemon(id) {\n  return async (dispatch) => {\n    await dispatch({\n      type: STORE_TYPE.POKEMON_CATCHED,\n      payload: id\n    })\n  }\n}\n\nexport function resetCatchFailure() {\n  return {\n    type: STORE_TYPE.RESET_CATCH_FAILURE,\n  }\n}\n\nexport function getMyPokemonList() {\n  return async (dispatch) => {\n    await dispatch({\n      type: STORE_TYPE.GET_MY_POKEMON_LIST,\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}